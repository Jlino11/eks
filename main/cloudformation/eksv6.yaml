AWSTemplateFormatVersion: "2010-09-09"
Description: Modular CloudFormation template for VPC, EKS Cluster with Fargate, NGINX as reverse proxy, S3 with CloudFront, and security configurations for PCI DSS.

# PARAMETERS
Parameters:
  VPCName:
    Type: String
    Default: MyEKS-VPC
    Description: Name of the VPC.
  ClusterName:
    Type: String
    Default: MyEKSCluster
    Description: Name of the EKS Cluster.
  NodeGroupName:
    Type: String
    Default: MyFargateProfile
    Description: Name of the Fargate profile.
  Environment:
    Type: String
    Default: Production
    Description: Environment (e.g., Development, Production).
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR for the first public subnet.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR for the second public subnet.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR for the first private subnet.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR for the second private subnet.
  EKSVersion:
    Type: String
    Default: "1.31"
    Description: Kubernets version.
  # S3BucketName:
  #   Type: String
  #   Default: static-content-bucket
  #   Description: S3 bucket name for static content.
  # SSLCertificateArn:
  #   Type: String
  #   Description: ACM ARN of the SSL/TLS certificate.
  # LoggingBucket:
  #   Type: String
  #   Description: S3 bucket name for logging purposes.
  # DBInstanceClass:
  #   Type: String
  #   Default: db.t3.medium
  #   Description: DB instance class for PostgreSQL.
  # AllocatedStorage:
  #   Type: String
  #   Default: "20"
  #   Description: Allocated storage for PostgreSQL in GB.
  # DBName:
  #   Type: String
  #   Default: MyPaymentDB
  #   Description: Name of the PostgreSQL database.
  # DBMasterUsername:
  #   Type: String
  #   Default: admin
  #   Description: Master username for PostgreSQL database.
  # DBMasterPassword:
  #   NoEcho: true
  #   Type: String
  #   Description: Master password for PostgreSQL database.
  # KmsKeyId:
  #   Type: String
  #   Description: The KMS Key ID used to encrypt the database.
  VersionTag:
    Type: String
    Default: v1.0.0
    Description: Version tag for this CloudFormation stack.

##########################################################################################################
# RESOURCES
Resources:
# NETWORK
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-InternetGateway"
        - Key: Version
          Value: !Ref VersionTag

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Version
          Value: !Ref VersionTag

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-NatGateway"
        - Key: Version
          Value: !Ref VersionTag

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PublicSubnet-AZ1"
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PublicSubnet-AZ2"
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PrivateSubnet-AZ1"
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PrivateSubnet-AZ2"
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag
#################################################################################
# ROUTE TABLES
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PublicRouteTable"
        - Key: Version
          Value: !Ref VersionTag

  PublicRouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PrivateRouteTable"
        - Key: Version
          Value: !Ref VersionTag

  PrivateRouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
###############################################################################################
# ROUTETABLE ASSOCIATIONS
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

###############################################################################################
# SECURITY GROUPS

  # Resources:
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EKS cluster"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow inbound traffic from within the VPC (for internal pod communication)
        - IpProtocol: -1  # All traffic
          CidrIp: 10.0.0.0/16  # VPC range
      SecurityGroupEgress:
        # Allow all outbound traffic
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-eks-sg"
        - Key: Version
          Value: !Ref VersionTag

  FargatePodSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Fargate pods"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow inbound traffic from the EKSClusterSecurityGroup (internal communication)
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
      SecurityGroupEgress:
        # Allow all outbound traffic (internet access)
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-fargate-sg"
        - Key: Version
          Value: !Ref VersionTag

  # RDSSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: "Security group for RDS PostgreSQL"
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       # Allow traffic to PostgreSQL (port 5432) from within the VPC
  #       - IpProtocol: tcp
  #         FromPort: 5432
  #         ToPort: 5432
  #         CidrIp: 10.0.0.0/16  # VPC range
  #     SecurityGroupEgress:
  #       # Allow all outbound traffic (to interact with other services like S3, external APIs, etc.)
  #       - IpProtocol: -1
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${ClusterName}-rds-sg"
  #       - Key: Version
  #         Value: !Ref VersionTag

  NatGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for NAT Gateway"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow traffic from private subnets (for outgoing internet access)
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16  # VPC range
      SecurityGroupEgress:
        # Allow all outbound traffic (to internet)
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-nat-sg"
        - Key: Version
          Value: !Ref VersionTag

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443  # HTTPS traffic
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Public access for HTTPS
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # Allow outbound traffic
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  


###########################################################################################################
# SERVICES

  # ALB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: PaymentGatewayALB
  #     Scheme: internet-facing
  #     Subnets:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #     SecurityGroups:
  #       - !Ref ALBSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: ALB-PaymentGateway

  # ALBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref ALB
  #     Port: 443  # HTTPS port
  #     Protocol: HTTPS
  #     Certificates:
  #       - CertificateArn: !Ref SSLCertificateArn  # ACM certificate
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref PaymentTargetGroup

  # PaymentTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: PaymentTargetGroup
  #     Port: 8080  # Traffic to backend pods
  #     Protocol: HTTP
  #     VpcId: !Ref VPC
  #     TargetType: ip  # Targeting Fargate pods
  #     HealthCheckProtocol: HTTP
  #     HealthCheckPath: /health
  #     HealthCheckIntervalSeconds: 30
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     UnhealthyThresholdCount: 2
  #     Tags:
  #       - Key: Name
  #         Value: PaymentTargetGroup

  # # S3 for Static Content and CloudFront Configuration
  # StaticContentBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Ref S3BucketName
  #     AccessControl: Private
  #     VersioningConfiguration:
  #       Status: Enabled
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: aws:kms
  #     Tags:
  #       - Key: Name
  #         Value: !Ref S3BucketName
  #       - Key: Version
  #         Value: !Ref VersionTag

  # CloudFrontDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Origins:
  #         - DomainName: !GetAtt StaticContentBucket.DomainName
  #           Id: S3Origin
  #           S3OriginConfig: {}
  #       Enabled: true
  #       DefaultCacheBehavior:
  #         TargetOriginId: S3Origin
  #         ViewerProtocolPolicy: redirect-to-https
  #         AllowedMethods: 
  #           - GET
  #           - HEAD
  #         CachedMethods:
  #           - GET
  #           - HEAD
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref SSLCertificateArn
  #         SslSupportMethod: sni-only
  #       HttpVersion: http2
  #       Logging:
  #         Bucket: !Ref LoggingBucket
  #         IncludeCookies: false
  #     Tags:
  #       - Key: Version
  #         Value: !Ref VersionTag
  ######################################################################################
  # CLUSTER CONFIG

  # IAM Role para EKS Cluster
    # IAM Role for the EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Tags:
        - Key: Name
          Value: EKSClusterRole

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      Version: !Ref EKSVersion
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  # IAM Role for Fargate Pods
  PodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Tags:
        - Key: Name
          Value: PodExecutionRole

  # Fargate Profile
  FargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: !Ref NodeGroupName
      PodExecutionRoleArn: !GetAtt PodExecutionRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Selectors:
        - Namespace: default

  # IAM Policy for AWS Load Balancer Controller
  AWSLoadBalancerControllerIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSLoadBalancerControllerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - elasticloadbalancing:*
              - autoscaling:*
              - ec2:DescribeInstances
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
              - ec2:CreateSecurityGroup
              - ec2:DeleteSecurityGroup
              - iam:CreateServiceLinkedRole
              - acm:ListCertificates
              - acm:DescribeCertificate
              - cognito-idp:DescribeUserPoolClient
              - waf-regional:GetWebACLForResource
              - waf-regional:GetWebACL
              - wafv2:GetWebACLForResource
              - wafv2:GetWebACL
              - shield:GetSubscriptionState
              - shield:DescribeProtection
              - shield:CreateProtection
              - shield:DeleteProtection
            Resource: "*"
      Roles:
        - !Ref PodExecutionRole  # Asociar la política al rol de ejecución de pods

  # Fargate Profile for kube-system Namespace
  # FargateProfileKubeSystem:
  #   Type: AWS::EKS::FargateProfile
  #   DependsOn: FargateProfile  # Make sure the default profile is created first
  #   Properties:
  #     ClusterName: !Ref EKSCluster
  #     FargateProfileName: kube-system-profile
  #     PodExecutionRoleArn: !GetAtt PodExecutionRole.Arn
  #     Subnets:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #     Selectors:
  #       - Namespace: kube-system
  #       - Namespace: kube-public
  #       - Namespace: kube-node-lease
  #       # - 
  #     Tags:
  #       - Key: Version
  #         Value: !Ref VersionTag

  # # PostgreSQL Database (RDS) with KMS Encryption
  # RDSPostgresDB:
  #   Type: AWS::RDS::DBInstance
  #   Properties: 
  #     DBInstanceIdentifier: !Sub "${ClusterName}-postgres-db"
  #     DBInstanceClass: !Ref DBInstanceClass
  #     Engine: postgres
  #     MasterUsername: !Ref DBMasterUsername
  #     MasterUserPassword: !Ref DBMasterPassword
  #     AllocatedStorage: !Ref AllocatedStorage
  #     DBName: !Ref DBName
  #     VPCSecurityGroups:
  #       - !Ref RDSSecurityGroup
  #     DBSubnetGroupName: !Ref DBSubnetGroup
  #     StorageEncrypted: true
  #     KmsKeyId: !Ref KmsKeyId
  #     BackupRetentionPeriod: 7
  #     MultiAZ: true
  #     PubliclyAccessible: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${ClusterName}-postgres-db"
  #       - Key: Version
  #         Value: !Ref VersionTag

  # # DB Subnet Group for RDS (using private subnets)
  # DBSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties:
  #     DBSubnetGroupDescription: "Subnet group for PostgreSQL RDS"
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${ClusterName}-db-subnet-group"
  #       - Key: Version
  #         Value: !Ref VersionTag

  # ESTO ES IMPOSIBLE REALIZARLO CON CLOUDFORMATION
  # NGINXService:
  #   Type: AWS::EKS::Service
  #   Properties:
  #     ClusterName: !Ref EKSCluster
  #     Name: nginx-service
  #     Namespace: default
  #     Spec:
  #       Type: LoadBalancer
  #       Ports:
  #         - Port: 80
  #           Protocol: TCP
  #           TargetPort: 80
  #       Selector:
  #         app: nginx
  #     Tags:
  #       - Key: Version
  #         Value: !Ref VersionTag

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  # CloudFrontDomain:
  #   Description: CloudFront domain name
  #   Value: !GetAtt CloudFrontDistribution.DomainName
  EKSClusterName:
    Description: EKS Cluster Name
    Value: !Ref EKSCluster

# TODO:
# SE NECESITA CREAR UN LOADBALANCER CON EKS EL CUAL ES UTILIZADO POR UN ALB COMO TARGET