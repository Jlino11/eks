AWSTemplateFormatVersion: "2010-09-09"
Description: Modular CloudFormation template for VPC, EKS Cluster with Fargate, NGINX as reverse proxy, S3 with CloudFront, and security configurations for PCI DSS.

Parameters:
  VPCName:
    Type: String
    Default: MyEKS-VPC
    Description: Name of the VPC.
  ClusterName:
    Type: String
    Default: MyEKSCluster
    Description: Name of the EKS Cluster.
  NodeGroupName:
    Type: String
    Default: MyFargateProfile
    Description: Name of the Fargate profile.
  Environment:
    Type: String
    Default: Production
    Description: Environment (e.g., Development, Production).
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR for the first public subnet.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR for the second public subnet.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR for the first private subnet.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR for the second private subnet.
  EKSVersion:
    Type: String
    Default: "1.31"
    Description: Kubernets version.
  # S3BucketName:
  #   Type: String
  #   Default: static-content-bucket
  #   Description: S3 bucket name for static content.
  # SSLCertificateArn:
  #   Type: String
  #   Description: ACM ARN of the SSL/TLS certificate.
  # LoggingBucket:
  #   Type: String
  #   Description: S3 bucket name for logging purposes.
  VersionTag:
    Type: String
    Default: v1.0.0
    Description: Version tag for this CloudFormation stack.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-InternetGateway"
        - Key: Version
          Value: !Ref VersionTag

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Version
          Value: !Ref VersionTag

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-NatGateway"
        - Key: Version
          Value: !Ref VersionTag

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PublicSubnet-AZ1"
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PublicSubnet-AZ2"
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PrivateSubnet-AZ1"
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PrivateSubnet-AZ2"
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PublicRouteTable"
        - Key: Version
          Value: !Ref VersionTag

  PublicRouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VPCName}-PrivateRouteTable"
        - Key: Version
          Value: !Ref VersionTag

  PrivateRouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # # S3 for Static Content and CloudFront Configuration
  # StaticContentBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Ref S3BucketName
  #     AccessControl: Private
  #     VersioningConfiguration:
  #       Status: Enabled
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: aws:kms
  #     Tags:
  #       - Key: Name
  #         Value: !Ref S3BucketName
  #       - Key: Version
  #         Value: !Ref VersionTag

  # CloudFrontDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Origins:
  #         - DomainName: !GetAtt StaticContentBucket.DomainName
  #           Id: S3Origin
  #           S3OriginConfig: {}
  #       Enabled: true
  #       DefaultCacheBehavior:
  #         TargetOriginId: S3Origin
  #         ViewerProtocolPolicy: redirect-to-https
  #         AllowedMethods: 
  #           - GET
  #           - HEAD
  #         CachedMethods:
  #           - GET
  #           - HEAD
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref SSLCertificateArn
  #         SslSupportMethod: sni-only
  #       HttpVersion: http2
  #       Logging:
  #         Bucket: !Ref LoggingBucket
  #         IncludeCookies: false
  #     Tags:
  #       - Key: Version
  #         Value: !Ref VersionTag
  # IAM Role para EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Tags:
        - Key: Name
          Value: EKSClusterRole
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag
          
  # EKS Cluster and Fargate Configuration
  # Asociamos el rol al Cluster EKS
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      Version: "1.31"  # Specify the Kubernetes version here
      Tags:
        - Key: Version
          Value: !Ref VersionTag

  # IAM Role para la ejecuci√≥n de Pods en Fargate
  PodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Tags:
        - Key: Name
          Value: PodExecutionRole
        - Key: Environment
          Value: !Ref Environment
        - Key: Version
          Value: !Ref VersionTag

  # Fargate Profile para el namespace "kube-system"
  FargateProfileKubeSystem:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: kube-system-profile
      PodExecutionRoleArn: !GetAtt PodExecutionRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Selectors:
        - Namespace: kube-system
      Tags:
        - Key: Version
          Value: !Ref VersionTag
          
  # Perfil de Fargate para ejecutar Pods en el namespace "default"
  FargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: !Ref NodeGroupName
      PodExecutionRoleArn: !GetAtt PodExecutionRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Selectors:
        - Namespace: default
        # - Namespace: kube-system 
      Tags:
        - Key: Version
          Value: !Ref VersionTag

  # ESTO ES IMPOSIBLE REALIZARLO CON CLOUDFORMATION
  # NGINXService:
  #   Type: AWS::EKS::Service
  #   Properties:
  #     ClusterName: !Ref EKSCluster
  #     Name: nginx-service
  #     Namespace: default
  #     Spec:
  #       Type: LoadBalancer
  #       Ports:
  #         - Port: 80
  #           Protocol: TCP
  #           TargetPort: 80
  #       Selector:
  #         app: nginx
  #     Tags:
  #       - Key: Version
  #         Value: !Ref VersionTag

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  # CloudFrontDomain:
  #   Description: CloudFront domain name
  #   Value: !GetAtt CloudFrontDistribution.DomainName
  EKSClusterName:
    Description: EKS Cluster Name
    Value: !Ref EKSCluster
